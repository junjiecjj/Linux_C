!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jack/公共的/Linux_C/HeapStack_Memory/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20230219.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(EXEC)	Makefile	/^$(EXEC):$(OBJS)		# 规则入口->目标文件：引入依赖文件,等价于mytest:main.o a.o$/;"	t
%o	Makefile	/^%o:%cpp			#缺省规则：等价于%o:%cpp，表示OBJS中所有的.o文件与SRCS中同名.cpp文/;"	t
**▍小结：**	堆栈的区别.md	/^## **▍小结：**$/;"	s	chapter:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
**一、程序的内存分配**	堆栈的区别.md	/^## **一、程序的内存分配**$/;"	s	chapter:[内存分配之堆和栈的区别](https://mp.weixin.qq.com/s?__biz=MzI4OTU3ODk3NQ==&mid=2247484458&idx=1&sn=ad6d6af2780d62a5a0f2621c79943c6e&chksm=ec2c4e9adb5bc78cfabc3c1ff6bf4621e3ded51579279c4822e51c9943987c3b59c987ee584f&mpshare=1&scene=24&srcid=0614LXTftJ4wjiZV94pEsSmW&sharer_sharetime=1623604131463&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
**三、java堆和栈的区别**	堆栈的区别.md	/^## **三、java堆和栈的区别**$/;"	s	chapter:[内存分配之堆和栈的区别](https://mp.weixin.qq.com/s?__biz=MzI4OTU3ODk3NQ==&mid=2247484458&idx=1&sn=ad6d6af2780d62a5a0f2621c79943c6e&chksm=ec2c4e9adb5bc78cfabc3c1ff6bf4621e3ded51579279c4822e51c9943987c3b59c987ee584f&mpshare=1&scene=24&srcid=0614LXTftJ4wjiZV94pEsSmW&sharer_sharetime=1623604131463&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
**二、C/C++堆和栈的区别**	堆栈的区别.md	/^## **二、C\/C++堆和栈的区别**$/;"	s	chapter:[内存分配之堆和栈的区别](https://mp.weixin.qq.com/s?__biz=MzI4OTU3ODk3NQ==&mid=2247484458&idx=1&sn=ad6d6af2780d62a5a0f2621c79943c6e&chksm=ec2c4e9adb5bc78cfabc3c1ff6bf4621e3ded51579279c4822e51c9943987c3b59c987ee584f&mpshare=1&scene=24&srcid=0614LXTftJ4wjiZV94pEsSmW&sharer_sharetime=1623604131463&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
*.cjson	.vscode/settings.json	/^    "*.cjson": "jsonc",$/;"	s	object:files.associations
*.tcc	.vscode/settings.json	/^    "*.tcc": "c",$/;"	s	object:files.associations
*.wxs	.vscode/settings.json	/^    "*.wxs": "javascript",$/;"	s	object:files.associations
*.wxss	.vscode/settings.json	/^    "*.wxss": "css",$/;"	s	object:files.associations
0	.vscode/c_cpp_properties.json	/^        ""$/;"	s	array:configurations.0.compilerArgs
0	.vscode/c_cpp_properties.json	/^        "${workspaceFolder}\/**"$/;"	s	array:configurations.0.includePath
0	.vscode/c_cpp_properties.json	/^    {$/;"	o	array:configurations
0	.vscode/launch.json	/^        {$/;"	o	array:configurations.0.setupCommands
0	.vscode/launch.json	/^    {$/;"	o	array:configurations
0	.vscode/settings.json	/^    "*",$/;"	s	array:C_Cpp_Runner.includeSearch
0	.vscode/settings.json	/^    "**\/build",$/;"	s	array:C_Cpp_Runner.excludeSearch
0	.vscode/settings.json	/^    "-Wall",$/;"	s	array:C_Cpp_Runner.warnings
1	.vscode/settings.json	/^    "**\/*"$/;"	s	array:C_Cpp_Runner.includeSearch
1	.vscode/settings.json	/^    "**\/build\/**",$/;"	s	array:C_Cpp_Runner.excludeSearch
1	.vscode/settings.json	/^    "-Wextra",$/;"	s	array:C_Cpp_Runner.warnings
1.1 内存四区	堆栈的区别.md	/^### 1.1 内存四区$/;"	S	section:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""一、内存
1.2 使用代码证实内存四区的底层结构	堆栈的区别.md	/^### 1.2 使用代码证实内存四区的底层结构$/;"	S	section:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""一、内存
1、BSS段( bss segment )	堆栈的区别.md	/^### 1、BSS段( bss segment )$/;"	S	section:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)""相关知识点
2	.vscode/settings.json	/^    "**\/.*",$/;"	s	array:C_Cpp_Runner.excludeSearch
2	.vscode/settings.json	/^    "-Wpedantic",$/;"	s	array:C_Cpp_Runner.warnings
2.1 malloc 和 free 的使用	堆栈的区别.md	/^### 2.1 malloc 和 free 的使用$/;"	S	section:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""二、malloc 和 free
2.2 delete 与 delete[] 的区别	堆栈的区别.md	/^### 2.2 delete 与 delete[] 的区别$/;"	S	section:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""三、 new 和 delete
2.2 内存泄漏与安全使用实例与讲解	堆栈的区别.md	/^### 2.2 内存泄漏与安全使用实例与讲解$/;"	S	section:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""二、malloc 和 free
2、数据段(data segment)	堆栈的区别.md	/^### 2、数据段(data segment)$/;"	S	section:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)""相关知识点
3	.vscode/settings.json	/^    "**\/.*\/**",$/;"	s	array:C_Cpp_Runner.excludeSearch
3	.vscode/settings.json	/^    "-Wshadow",$/;"	s	array:C_Cpp_Runner.warnings
3.1 new 和 delete 使用	堆栈的区别.md	/^### 3.1 new 和 delete 使用$/;"	S	section:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""三、 new 和 delete
3、代码段(code segment/text segment)	堆栈的区别.md	/^### 3、代码段(code segment\/text segment)$/;"	S	section:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)""相关知识点
4	.vscode/settings.json	/^    "**\/.vscode",$/;"	s	array:C_Cpp_Runner.excludeSearch
4	.vscode/settings.json	/^    "-Wformat=2",$/;"	s	array:C_Cpp_Runner.warnings
4、堆(heap)	堆栈的区别.md	/^### 4、堆(heap)$/;"	S	section:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)""相关知识点
5	.vscode/settings.json	/^    "**\/.vscode\/**"$/;"	s	array:C_Cpp_Runner.excludeSearch
5	.vscode/settings.json	/^    "-Wconversion",$/;"	s	array:C_Cpp_Runner.warnings
5、栈 (stack)	堆栈的区别.md	/^### 5、栈 (stack)$/;"	S	section:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)""相关知识点
6	.vscode/settings.json	/^    "-Wnull-dereference",$/;"	s	array:C_Cpp_Runner.warnings
7	.vscode/settings.json	/^    "-Wsign-conversion"$/;"	s	array:C_Cpp_Runner.warnings
A	C++_new_delete.cpp	/^      A(){ m_cBuffer = new char[m_nLen]; }$/;"	f	class:A	file:
A	C++_new_delete.cpp	/^     A()$/;"	f	class:A	file:
A	C++_new_delete.cpp	/^class A$/;"	c	file:
AChangeGlobal	C_StaticGlo.c	/^int AChangeGlobal(void)$/;"	f	typeref:typename:int
AllocateArray	ArrayPoint.c	/^void AllocateArray(int **arr, int size, int value)$/;"	f	typeref:typename:void
ArrDiffPnt	String.c	/^void ArrDiffPnt(void)$/;"	f	typeref:typename:void
Array2D	ArrayPoint.c	/^void Array2D(void)$/;"	f	typeref:typename:void
ArrayMatrix	Variable.h	/^	COMPLEX			ArrayMatrix[BEAM_NUM][BEAM_NUM];\/\/矩阵$/;"	m	struct:_CMATRIX	typeref:typename:COMPLEX[][]
ArrayMatrix	Variable.h	/^	float			ArrayMatrix[BEAM_NUM][BEAM_NUM];\/\/矩阵$/;"	m	struct:_RMATRIX	typeref:typename:float[][]
BEAM_NUM	Variable.h	/^#define             BEAM_NUM /;"	d
Babe	C++_new_delete.cpp	/^    Babe()$/;"	f	class:Babe	file:
Babe	C++_new_delete.cpp	/^class Babe$/;"	c	file:
CC	Makefile	/^CC=gcc			# 定义变量，表示使用g++编译器$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -O2 -g	# 配置编译器，-Wall表示输出警告信息，-O表示编译优化，-/;"	m
CMATRIX	Variable.h	/^} CMATRIX;$/;"	t	typeref:struct:_CMATRIX
COLS	ArrayPoint.h	/^#define COLS /;"	d
COMPLEX	Variable.h	/^} COMPLEX;$/;"	t	typeref:struct:_COMPLEX
COMPLEX_INT16	Variable.h	/^} COMPLEX_INT16;$/;"	t	typeref:struct:_COMPLEX_INT16
COMPLEX_INT32	Variable.h	/^} COMPLEX_INT32;$/;"	t	typeref:struct:_COMPLEX_INT32
CString	String.c	/^int CString(void)$/;"	f	typeref:typename:int
C_Cpp_Runner.cCompilerPath	.vscode/settings.json	/^  "C_Cpp_Runner.cCompilerPath": "gcc",$/;"	s
C_Cpp_Runner.cStandard	.vscode/settings.json	/^  "C_Cpp_Runner.cStandard": "",$/;"	s
C_Cpp_Runner.compilerArgs	.vscode/settings.json	/^  "C_Cpp_Runner.compilerArgs": [],$/;"	a
C_Cpp_Runner.cppCompilerPath	.vscode/settings.json	/^  "C_Cpp_Runner.cppCompilerPath": "g++",$/;"	s
C_Cpp_Runner.cppStandard	.vscode/settings.json	/^  "C_Cpp_Runner.cppStandard": "",$/;"	s
C_Cpp_Runner.debuggerPath	.vscode/settings.json	/^  "C_Cpp_Runner.debuggerPath": "gdb",$/;"	s
C_Cpp_Runner.enableWarnings	.vscode/settings.json	/^  "C_Cpp_Runner.enableWarnings": true,$/;"	b
C_Cpp_Runner.excludeSearch	.vscode/settings.json	/^  "C_Cpp_Runner.excludeSearch": [$/;"	a
C_Cpp_Runner.includePaths	.vscode/settings.json	/^  "C_Cpp_Runner.includePaths": [],$/;"	a
C_Cpp_Runner.includeSearch	.vscode/settings.json	/^  "C_Cpp_Runner.includeSearch": [$/;"	a
C_Cpp_Runner.linkerArgs	.vscode/settings.json	/^  "C_Cpp_Runner.linkerArgs": [],$/;"	a
C_Cpp_Runner.msvcBatchPath	.vscode/settings.json	/^  "C_Cpp_Runner.msvcBatchPath": "",$/;"	s
C_Cpp_Runner.useMsvc	.vscode/settings.json	/^  "C_Cpp_Runner.useMsvc": false,$/;"	b
C_Cpp_Runner.warnings	.vscode/settings.json	/^  "C_Cpp_Runner.warnings": [$/;"	a
C_Cpp_Runner.warningsAsError	.vscode/settings.json	/^  "C_Cpp_Runner.warningsAsError": false,$/;"	b
C_malloc	ArrayPoint.c	/^void C_malloc(){$/;"	f	typeref:typename:void
C_stack	ArrayPoint.c	/^void C_stack(){$/;"	f	typeref:typename:void
ChangeGlob	C_StaticGlo.c	/^void ChangeGlob(void)$/;"	f	typeref:typename:void
ChangeStaticMem	VLAmal.c	/^void ChangeStaticMem(void)$/;"	f	typeref:typename:void
DATASTR	StructMallocFree.h	/^} DATASTR;$/;"	t	typeref:struct:_DATASTRUCT
DBL_MAX	Utility.h	/^#define DBL_MAX /;"	d
Display1DIntArray	Utility.c	/^void Display1DIntArray(const int arr[], int size)$/;"	f	typeref:typename:void
Display1DIntArray2	Utility.c	/^void Display1DIntArray2(const int arr[], int size)$/;"	f	typeref:typename:void
Display1DIntArray3	Utility.c	/^void Display1DIntArray3(const int *arr, int size)$/;"	f	typeref:typename:void
Display1DIntArray4	Utility.c	/^void Display1DIntArray4(const int *arr, int size)$/;"	f	typeref:typename:void
Display2DIntArray	Utility.c	/^void Display2DIntArray(int rows, int cols,int (*A)[cols])$/;"	f	typeref:typename:void
Display2DIntArray1	Utility.c	/^void Display2DIntArray1(int rows, int cols, int A[][cols])$/;"	f	typeref:typename:void
Display2DIntArray2DPoint	Utility.c	/^void Display2DIntArray2DPoint(int rows, int cols, int **A)$/;"	f	typeref:typename:void
Display2DIntArrayNorm	Utility.c	/^void Display2DIntArrayNorm(int rows, int cols, const int ar[rows][cols])  \/\/ 带变长数组形/;"	f	typeref:typename:void
Display2DIntArrayUse1D	Utility.c	/^void Display2DIntArrayUse1D(int rows, int cols, int *ar)$/;"	f	typeref:typename:void
DisplayMonth	Test/VLAmal.c	/^void DisplayMonth(void)$/;"	f	typeref:typename:void
DisplayMonth	VLAmal.c	/^void DisplayMonth(void)$/;"	f	typeref:typename:void
EXEC	Makefile	/^EXEC=outexe		# 表示生成的可执行文件$/;"	m
Free2DNotContinueMem	Utility.c	/^void Free2DNotContinueMem(int** pm,int r,int c){$/;"	f	typeref:typename:void
FreeLocalPoint	VLAmal.c	/^void  FreeLocalPoint(int *LocalPoint)$/;"	f	typeref:typename:void
FreeStaticMem	VLAmal.c	/^void FreeStaticMem(void)$/;"	f	typeref:typename:void
GetMemory3	ArrayPoint.c	/^char *GetMemory3(int num)$/;"	f	typeref:typename:char *
GlobalPoint	VLAmal.c	/^int *GlobalPoint = NULL;$/;"	v	typeref:typename:int *
InitStaticMemory	VLAmal.c	/^void InitStaticMemory(void)$/;"	f	typeref:typename:void
LEN	Test/VLAmal.h	/^#define LEN /;"	d
LEN	Utility.c	/^#define LEN /;"	d	file:
LEN	VLAmal.h	/^#define LEN /;"	d
LIM	String.h	/^#define  LIM /;"	d
Len	C_MemoryError.c	/^#define Len /;"	d	file:
LenSizeofStr	String.c	/^void LenSizeofStr(void)$/;"	f	typeref:typename:void
MAX	String.h	/^#define  MAX /;"	d
MIMode	.vscode/launch.json	/^      "MIMode": "gdb",$/;"	s	object:configurations.0
MONTHS	C_ArrayPoint.c	/^#define MONTHS /;"	d	file:
MONTHS	Test/VLAmal.h	/^#define MONTHS /;"	d
MONTHS	Utility.h	/^#define MONTHS /;"	d
MONTHS	VLAmal.h	/^#define MONTHS /;"	d
MSG	String.h	/^#define  MSG /;"	d
MallocAndReturnLocalPoint	VLAmal.c	/^int *MallocAndReturnLocalPoint()$/;"	f	typeref:typename:int *
MallocFree3D	ArrayPoint.c	/^int MallocFree3D(void)$/;"	f	typeref:typename:int
MatrixCol	Variable.h	/^	unsigned int	MatrixCol;		\/\/列数$/;"	m	struct:_CMATRIX	typeref:typename:unsigned int
MatrixCol	Variable.h	/^	unsigned int	MatrixCol;		\/\/列数$/;"	m	struct:_RMATRIX	typeref:typename:unsigned int
MatrixRow	Variable.h	/^	unsigned int	MatrixRow;		\/\/行数$/;"	m	struct:_CMATRIX	typeref:typename:unsigned int
MatrixRow	Variable.h	/^	unsigned int	MatrixRow;		\/\/行数$/;"	m	struct:_RMATRIX	typeref:typename:unsigned int
Matrix_Adjoint	ExpMath.c	/^void Matrix_Adjoint(RMATRIX arcs,int n,RMATRIX *ans)\/\/计算每一行每一列的每个元素所/;"	f	typeref:typename:void
Matrix_Determinant	ExpMath.c	/^float Matrix_Determinant(RMATRIX arcs,int n)\/\/按第一行展开计算|A|$/;"	f	typeref:typename:float
Matrix_Invers	ExpMath.c	/^RMATRIX Matrix_Invers(RMATRIX acr,int n)$/;"	f	typeref:typename:RMATRIX
MeanUpdata	ExpMath.c	/^float MeanUpdata(float mean_old, float samp_new,  unsigned int N)$/;"	f	typeref:typename:float
NAME	StructMallocFree.h	/^} NAME;$/;"	t	typeref:struct:names
OBJS	Makefile	/^OBJS=$(SRCS:.c=.o)	#  表示目标依赖文件.o，其又依赖于SRCS中的cpp文件$/;"	m
PI	Utility.h	/^#define PI /;"	d
PI	Variable.h	/^#define				PI /;"	d
Partab	PartAB.c	/^int Partab(void)$/;"	f	typeref:typename:int
Pnt2DArray	ArrayPoint.c	/^void Pnt2DArray(void)$/;"	f	typeref:typename:void
PntAddress	ArrayPoint.c	/^void PntAddress(void)$/;"	f	typeref:typename:void
Print2DMatrix	C_PrintMatrix.c	/^void Print2DMatrix(int rows, int cols, int ar[rows][cols])$/;"	f	typeref:typename:void
Print2DMatrix_1D	C_PrintMatrix.c	/^void Print2DMatrix_1D(int rows, int cols, int *ar)$/;"	f	typeref:typename:void
Quick_sort	ExpMath.c	/^void Quick_sort(float *input, unsigned int first,unsigned int end,unsigned int *idx)$/;"	f	typeref:typename:void
Quick_sort_int	ExpMath.c	/^void Quick_sort_int(unsigned int *input, unsigned int first,unsigned int end)$/;"	f	typeref:typename:void
Quick_sort_noidx	ExpMath.c	/^void Quick_sort_noidx(float *input, unsigned int first, unsigned int end)$/;"	f	typeref:typename:void
RMATRIX	Variable.h	/^} RMATRIX;$/;"	t	typeref:struct:_RMATRIX
ROWS	ArrayPoint.h	/^#define ROWS /;"	d
ReturnHeap	ArrayPoint.c	/^void ReturnHeap(void)$/;"	f	typeref:typename:void
ReturnStr	ArrayPoint.c	/^int ReturnStr(void)$/;"	f	typeref:typename:int
ReturnStr1	ArrayPoint.c	/^int ReturnStr1(void)$/;"	f	typeref:typename:int
ReturnStr2	ArrayPoint.c	/^int ReturnStr2(void)$/;"	f	typeref:typename:int
ReturnStruct	StructMallocFree.c	/^DATASTR ReturnStruct(void)$/;"	f	typeref:typename:DATASTR
SEED	S_and_r.c	/^int SEED(void)$/;"	f	typeref:typename:int
SIZE	ArrayPoint.h	/^#define SIZE /;"	d
SIZE	C_ArrayPoint.c	/^#define SIZE /;"	d	file:
SIZE	Utility.h	/^#define SIZE /;"	d
SIZE1	String.h	/^#define  SIZE1 /;"	d
SLEN	String.h	/^#define  SLEN /;"	d
SLEN	StructMallocFree.h	/^#define SLEN /;"	d
SMALLPROB	Utility.h	/^#define SMALLPROB /;"	d
SRCS	Makefile	/^SRCS= C_StaticGlobal.c  Diceroll.c  C_StaticGlo.c loc_stat.c PartAB.c S_and_r.c Where.c  VLAmal./;"	m
Show1DArrayKindsOfWays	ArrayPoint.c	/^void Show1DArrayKindsOfWays(void)$/;"	f	typeref:typename:void
Show2DArrayKindsOfWaysC	ArrayPoint.c	/^void Show2DArrayKindsOfWaysC(void)$/;"	f	typeref:typename:void
StdUpdata	ExpMath.c	/^float StdUpdata(float mean_old, float std_old, float samp_new,  unsigned int N)$/;"	f	typeref:typename:float
Sum1DIntArray1	Utility.c	/^int Sum1DIntArray1(const int ar[], int n)$/;"	f	typeref:typename:int
Sum1DIntArray2	Utility.c	/^int Sum1DIntArray2(int *start, int *end)$/;"	f	typeref:typename:int
TARGSIZE	String.h	/^#define  TARGSIZE /;"	d
TLB快表加速访问	堆栈的区别.md	/^### TLB快表加速访问$/;"	S	section:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""虚拟内存：小内存运行大程序
TestAllocateArray	ArrayPoint.c	/^void TestAllocateArray(void)$/;"	f	typeref:typename:void
TestArrayPoint	ArrayPoint.c	/^void  TestArrayPoint(void)$/;"	f	typeref:typename:void
TestStruct	StructMallocFree.c	/^int TestStruct(void)$/;"	f	typeref:typename:int
Trystat	loc_stat.c	/^void Trystat(void)$/;"	f	typeref:typename:void
UseLocalPoint	VLAmal.c	/^void  UseLocalPoint(void)$/;"	f	typeref:typename:void
UseReturnStru	StructMallocFree.c	/^void UseReturnStru(void)$/;"	f	typeref:typename:void
VECTER_COMPUT_MAX_LEN	ExpMath.h	/^#define		VECTER_COMPUT_MAX_LEN	/;"	d
VLAarr1	VLAmal.c	/^int VLAarr1[10][10];  \/\/ 1、声明数组时， 用常量表达式表示数组的维度， 用/;"	v	typeref:typename:int[10][10]
VLAarr2	VLAmal.c	/^int VLAarr2[LEN][LEN];  \/\/ 1、声明数组时， 用常量表达式表示数组的维度， 用/;"	v	typeref:typename:int[][]
VecMeanUpdata	ExpMath.c	/^float VecMeanUpdata(float mean_old, unsigned int M, float mean_new, unsigned int N)$/;"	f	typeref:typename:float
VecStdUpdata	ExpMath.c	/^float VecStdUpdata(float mean_old, float std_old,unsigned int M, float mean_new,float std_new, u/;"	f	typeref:typename:float
WHERE	Where.c	/^int WHERE(void)$/;"	f	typeref:typename:int
WORDS	String.h	/^#define  WORDS /;"	d
[C 语言内存分配](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484868&idx=1&sn=9b7c9db562fef3ecb1ac6c6380de2bde&chksm=9041131ea7369a08885289c104e4a53ea14709e4e4c5defdc740fe15c31ac2fc196358e502ec&mpshare=1&scene=24&srcid=0616tLB1MSYWHRzKLrVqFJqk&sharer_sharetime=1623843744845&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [C 语言内存分配](https:\/\/mp.weixin.qq.com\/s?__biz=MzA5NTM3MjIxMw==&mid=2247484868&idx/;"	c
[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)	堆栈的区别.md	/^# [C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](htt/;"	c
[C语言：什么是野指针和内存泄漏？如何避免野指针](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484911&idx=1&sn=367cfee69fa10d5f14fd01011fe5c4a3&chksm=e8d35647dfa4df516ce2ac4981b9c568fbfd9e95afdcaf13105e4e628394255fd6012f46bd78&scene=0&xtrack=1#rd)	堆栈的区别.md	/^# [C语言：什么是野指针和内存泄漏？如何避免野指针](https:\/\/mp.weixin.qq.c/;"	c
[char *str与char str[]的区别](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247483862&idx=2&sn=cef070d13684fa68f466a93ff17ab0c0&chksm=fe0d6f11c97ae607db0086f6bdc8b89fc54be7c331c99118c982c47db70ed7cf6011e95ae106&mpshare=1&scene=1&srcid=0616D5xZbdWjjdLggo2RMLE7&sharer_sharetime=1623844586423&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [char *str与char str[]的区别](https:\/\/mp.weixin.qq.com\/s?__biz=MzU5MzcyMjI4MA==&mid=224/;"	c
[一份通俗易懂的C语言内存总结](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247483844&idx=2&sn=721c98390ec70fec0fe6c46823c928bc&chksm=fe0d6f03c97ae615311d38d3535d42de347b7dfc4ab8b846707a600450c0b82f784c0562ee75&scene=21#wechat_redirect)	堆栈的区别.md	/^# [一份通俗易懂的C语言内存总结](https:\/\/mp.weixin.qq.com\/s?__biz=MzU5MzcyMjI4MA=/;"	c
[内存分配之堆和栈的区别](https://mp.weixin.qq.com/s?__biz=MzI4OTU3ODk3NQ==&mid=2247484458&idx=1&sn=ad6d6af2780d62a5a0f2621c79943c6e&chksm=ec2c4e9adb5bc78cfabc3c1ff6bf4621e3ded51579279c4822e51c9943987c3b59c987ee584f&mpshare=1&scene=24&srcid=0614LXTftJ4wjiZV94pEsSmW&sharer_sharetime=1623604131463&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [内存分配之堆和栈的区别](https:\/\/mp.weixin.qq.com\/s?__biz=MzI4OTU3ODk3NQ==&mid=2/;"	c
[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [内存管理：程序是如何被优雅的装载到内存中](https:\/\/mp.weixin.qq.com\/s?_/;"	c
[函数运行时在内存中是什么样子？](https://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&mid=2247485714&idx=1&sn=1a315fe4da87fde2758fc9dd5366ba01&source=41#wechat_redirect)	堆栈的区别.md	/^##   [函数运行时在内存中是什么样子？](https:\/\/mp.weixin.qq.com\/s?__biz=Mzg4OTY/;"	s	chapter:函数与内存
[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [堆和栈的区别（转过无数次的文章）](https:\/\/mp.weixin.qq.com\/s?__biz=MzA5NTM/;"	c
[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [堆和栈的区别（非常详细，干货收藏！）](https:\/\/mp.weixin.qq.com\/s?__biz=M/;"	c
[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](htt/;"	c
[数组与指针有哪些区别？](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247485580&idx=1&sn=c18c0dee9ad0e47d009afa702843d3d0&chksm=fe0d664bc97aef5db4e0a7ee4d51576e158cb01fe7fe5d475c44b19bb41909ef9c44501c033e&mpshare=1&scene=24&srcid=0616HyiS0B4WmMyyVD8TCJk3&sharer_sharetime=1623852503691&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [数组与指针有哪些区别？](https:\/\/mp.weixin.qq.com\/s?__biz=MzU5MzcyMjI4MA==&mid=2/;"	c
[申请内存时底层发生了什么？](https://mp.weixin.qq.com/s/DN-ckM1YrPMeicN7P9FvXg)	堆栈的区别.md	/^## [申请内存时底层发生了什么？](https:\/\/mp.weixin.qq.com\/s\/DN-ckM1YrPMeicN7P9Fv/;"	s	chapter:函数与内存
[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)	堆栈的区别.md	/^# [看完这篇你还能不懂C语言\/C++内存管理？](https:\/\/mp.weixin.qq.com\/s?__biz=M/;"	c
[看完这篇还不懂高并发中的线程与线程池你来打我(内含20张图)](https://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&mid=2247485705&idx=1&sn=1845875575601b23ed5cea0579c1f77e&source=41#wechat_redirect)	堆栈的区别.md	/^# [看完这篇还不懂高并发中的线程与线程池你来打我(内含20张图)](https:\/\//;"	c
[线程间共享了哪些进程资源？](https://mp.weixin.qq.com/s/5Xq-uzbjCExWfws-czVYGQ)	堆栈的区别.md	/^##   [线程间共享了哪些进程资源？](https:\/\/mp.weixin.qq.com\/s\/5Xq-uzbjCExWfws-cz/;"	s	chapter:函数与内存
_ArrayPoint_CJJ	ArrayPoint.h	/^#define _ArrayPoint_CJJ$/;"	d
_CMATRIX	Variable.h	/^typedef struct _CMATRIX$/;"	s
_COMPLEX	Variable.h	/^typedef struct _COMPLEX$/;"	s
_COMPLEX_INT16	Variable.h	/^typedef struct _COMPLEX_INT16$/;"	s
_COMPLEX_INT32	Variable.h	/^typedef struct _COMPLEX_INT32$/;"	s
_C_staticGlobal_CJJ	C_StaticGlobal.h	/^#define _C_staticGlobal_CJJ$/;"	d
_C_staticGlobal_CJJ	Test/C_StaticGlobal.h	/^#define _C_staticGlobal_CJJ$/;"	d
_DATASTRUCT	StructMallocFree.h	/^typedef struct _DATASTRUCT$/;"	s
_Diceroll_CJJ	Diceroll.h	/^#define _Diceroll_CJJ$/;"	d
_EXPMATH_H_	ExpMath.h	/^#define _EXPMATH_H_$/;"	d
_LocStat_CJJ	loc_stat.h	/^#define _LocStat_CJJ$/;"	d
_PartAB_CJJ	PartAB.h	/^#define _PartAB_CJJ$/;"	d
_RMATRIX	Variable.h	/^typedef struct _RMATRIX$/;"	s
_S_and_R_CJJ	S_and_r.h	/^#define _S_and_R_CJJ$/;"	d
_StaticGlob_CJJ	C_StaticGlo.h	/^#define _StaticGlob_CJJ$/;"	d
_Utility_CJJ	Utility.h	/^#define _Utility_CJJ$/;"	d
_VARIABLE_H	Variable.h	/^#define _VARIABLE_H$/;"	d
_VLA_CJJ	Test/VLAmal.h	/^#define _VLA_CJJ$/;"	d
_VLA_CJJ	VLAmal.h	/^#define _VLA_CJJ$/;"	d
_Where_CJJ	Where.h	/^#define _Where_CJJ$/;"	d
a	C++_new_delete.cpp	/^   A *a = new A[10];$/;"	v	typeref:typename:A *
a	C++_new_delete.cpp	/^int *a = new int[10];$/;"	v	typeref:typename:int *
a	C_MemoryHeapStack.c	/^int a = 0; \/\/全局初始化区$/;"	v	typeref:typename:int
accumulate	PartAB.c	/^void accumulate(int k)  \/\/ k是块作用域，无链接$/;"	f	typeref:typename:void
adjugate_matrix	test.c	/^float adjugate_matrix(float matrix[20][20], int order, int r, int c)$/;"	f	typeref:typename:float
args	.vscode/launch.json	/^      "args": [],$/;"	a	object:configurations.0
array	.vscode/settings.json	/^    "array": "c",$/;"	s	object:files.associations
array2d	ArrayPoint.c	/^int array2d(void)$/;"	f	typeref:typename:int
arraypoint.h	.vscode/settings.json	/^    "arraypoint.h": "c"$/;"	s	object:files.associations
arrchar	String.c	/^void arrchar(void)$/;"	f	typeref:typename:void
bitset	.vscode/settings.json	/^    "bitset": "c",$/;"	s	object:files.associations
cStandard	.vscode/c_cpp_properties.json	/^      "cStandard": "${default}",$/;"	s	object:configurations.0
c_staticglo.h	.vscode/settings.json	/^    "c_staticglo.h": "c",$/;"	s	object:files.associations
c_staticglobal.h	.vscode/settings.json	/^    "c_staticglobal.h": "c",$/;"	s	object:files.associations
clean	Makefile	/^clean:$/;"	t
cmath	.vscode/settings.json	/^    "cmath": "c",$/;"	s	object:files.associations
cofactor	test.c	/^float cofactor(float matrix[20][20], int order, int r, int c)$/;"	f	typeref:typename:float
col	ArrayPoint.h	/^#define col /;"	d
cols	VLAmal.c	/^static int cols = 3;$/;"	v	typeref:typename:int	file:
compilerArgs	.vscode/c_cpp_properties.json	/^      "compilerArgs": [$/;"	a	object:configurations.0
compilerPath	.vscode/c_cpp_properties.json	/^      "compilerPath": "\/usr\/bin\/gcc",$/;"	s	object:configurations.0
complex	.vscode/settings.json	/^    "complex": "c",$/;"	s	object:files.associations
complex_abs	ExpMath.c	/^float	complex_abs(COMPLEX xdata)$/;"	f	typeref:typename:float
complex_adder	ExpMath.c	/^COMPLEX complex_adder(COMPLEX xdata, COMPLEX ydata)$/;"	f	typeref:typename:COMPLEX
complex_conj	ExpMath.c	/^COMPLEX	complex_conj(COMPLEX xdata)$/;"	f	typeref:typename:COMPLEX
complex_conj_multiper	ExpMath.c	/^COMPLEX complex_conj_multiper(COMPLEX xdata, COMPLEX ydata)$/;"	f	typeref:typename:COMPLEX
complex_diff	ExpMath.c	/^COMPLEX complex_diff(COMPLEX xdata, COMPLEX ydata)$/;"	f	typeref:typename:COMPLEX
complex_divider	ExpMath.c	/^COMPLEX complex_divider(COMPLEX xdata, COMPLEX ydata)$/;"	f	typeref:typename:COMPLEX
complex_float_adder	ExpMath.c	/^COMPLEX complex_float_adder(COMPLEX xdata, float ydata)$/;"	f	typeref:typename:COMPLEX
complex_float_diff	ExpMath.c	/^COMPLEX complex_float_diff(COMPLEX xdata, float ydata)$/;"	f	typeref:typename:COMPLEX
complex_float_divider	ExpMath.c	/^COMPLEX complex_float_divider(COMPLEX xdata, float ydata)$/;"	f	typeref:typename:COMPLEX
complex_float_multiper	ExpMath.c	/^COMPLEX complex_float_multiper(COMPLEX xdata, float ydata)$/;"	f	typeref:typename:COMPLEX
complex_matrix_adder	ExpMath.c	/^ CMATRIX complex_matrix_adder(CMATRIX xdata, CMATRIX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_constant_adder	ExpMath.c	/^ CMATRIX complex_matrix_constant_adder(CMATRIX xdata, COMPLEX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_constant_diff	ExpMath.c	/^ CMATRIX complex_matrix_constant_diff(CMATRIX xdata, COMPLEX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_constant_multiper	ExpMath.c	/^ CMATRIX complex_matrix_constant_multiper(CMATRIX xdata, COMPLEX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_diff	ExpMath.c	/^ CMATRIX complex_matrix_diff(CMATRIX xdata, CMATRIX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_multiper	ExpMath.c	/^ CMATRIX complex_matrix_multiper(CMATRIX xdata, CMATRIX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_point_divider	ExpMath.c	/^CMATRIX complex_matrix_point_divider(CMATRIX xdata, CMATRIX ydata)$/;"	f	typeref:typename:CMATRIX
complex_matrix_point_multiper	ExpMath.c	/^CMATRIX complex_matrix_point_multiper(CMATRIX xdata, CMATRIX ydata)$/;"	f	typeref:typename:CMATRIX
complex_multiper	ExpMath.c	/^COMPLEX complex_multiper(COMPLEX xdata, COMPLEX ydata)$/;"	f	typeref:typename:COMPLEX
complex_phase	ExpMath.c	/^float complex_phase(COMPLEX xdata)$/;"	f	typeref:typename:float
configurations	.vscode/c_cpp_properties.json	/^  "configurations": [$/;"	a
configurations	.vscode/launch.json	/^  "configurations": [$/;"	a
copy1	String.c	/^void copy1(void)$/;"	f	typeref:typename:void
copy2	String.c	/^void copy2(void)$/;"	f	typeref:typename:void
copy3	String.c	/^void copy3(void)$/;"	f	typeref:typename:void
count	PartAB.c	/^int count = 0;       \/\/ 文件作用域，外部链接，静态变量$/;"	v	typeref:typename:int
cppStandard	.vscode/c_cpp_properties.json	/^      "cppStandard": "${default}",$/;"	s	object:configurations.0
cwd	.vscode/launch.json	/^      "cwd": "\/home\/jack\/公共的\/Linux_C\/HeapStack_Memory",$/;"	s	object:configurations.0
dCalDeltaAzimuth	ExpMath.c	/^double dCalDeltaAzimuth(double Course1,double Course2)$/;"	f	typeref:typename:double
days	Test/VLAmal.c	/^const int days[MONTHS] = {31,28,31,30,31,30,31,31,30,31,30,31};$/;"	v	typeref:typename:const int[]
days	VLAmal.c	/^const int days[MONTHS] = {31,28,31,30,31,30,31,31,30,31,30,31};$/;"	v	typeref:typename:const int[]
description	.vscode/launch.json	/^          "description": "Enable pretty-printing for gdb",$/;"	s	object:configurations.0.setupCommands.0
determinant	test.c	/^float determinant(float matrix[20][20], int order)$/;"	f	typeref:typename:float
diceroll.h	.vscode/settings.json	/^    "diceroll.h": "c",$/;"	s	object:files.associations
displayArray	C_ArrayPoint.c	/^void displayArray(int arr[], int size)$/;"	f	typeref:typename:void
displayArray	C_memcpy.c	/^void displayArray(int arr[], int size)$/;"	f	typeref:typename:void
displayArray1	C_ArrayPoint.c	/^void displayArray1(int *arr, int size)$/;"	f	typeref:typename:void
displayArray1	C_memcpy.c	/^void displayArray1(int *arr, int size)$/;"	f	typeref:typename:void
displayArray2	C_ArrayPoint.c	/^void displayArray2(int *arr, int size)$/;"	f	typeref:typename:void
displayArray3	C_ArrayPoint.c	/^void displayArray3(int *arr, int size)$/;"	f	typeref:typename:void
displayArray4	C_ArrayPoint.c	/^void displayArray4(int arr[], int size)$/;"	f	typeref:typename:void
double_max	ExpMath.c	/^double double_max(double x, double y)$/;"	f	typeref:typename:double
double_median	ExpMath.c	/^double double_median(double *input,  unsigned int N)$/;"	f	typeref:typename:double
double_min	ExpMath.c	/^double double_min(double x, double y)$/;"	f	typeref:typename:double
double_qsort_noidx	ExpMath.c	/^void double_qsort_noidx(double *input,unsigned int first,unsigned int end)$/;"	f	typeref:typename:void
double_robust_mean	ExpMath.c	/^float double_robust_mean(double *input,unsigned int N)$/;"	f	typeref:typename:float
double_robust_std	ExpMath.c	/^float double_robust_std(double *input, unsigned int N)$/;"	f	typeref:typename:float
double_vector_max	ExpMath.c	/^double double_vector_max(double *input, unsigned int N)$/;"	f	typeref:typename:double
double_vector_min	ExpMath.c	/^double double_vector_min(double *input, unsigned int N)$/;"	f	typeref:typename:double
e	C_address.c	/^int e = 0;$/;"	v	typeref:typename:int
externalConsole	.vscode/launch.json	/^      "externalConsole": false,$/;"	b	object:configurations.0
files.associations	.vscode/settings.json	/^  "files.associations": {$/;"	o
find_local_comput	ExpMath.c	/^void find_local_comput(float value,float dmax,float dmin, float dstep, unsigned short dlen, unsi/;"	f	typeref:typename:void
find_local_comput_HJ	ExpMath.c	/^unsigned short find_local_comput_HJ(long value,long dmax,long dmin, double dstep, unsigned short/;"	f	typeref:typename:unsigned short
find_max_ID_In_Matrix	ExpMath.c	/^void find_max_ID_In_Matrix(RMATRIX *arcs,int *rMaxId,int *cMaxId)$/;"	f	typeref:typename:void
first	StructMallocFree.h	/^    char first[SLEN];$/;"	m	struct:names	typeref:typename:char[]
float_complex_divider	ExpMath.c	/^COMPLEX float_complex_divider(float xdata, COMPLEX ydata)$/;"	f	typeref:typename:COMPLEX
float_max	ExpMath.c	/^float float_max(float x, float y)$/;"	f	typeref:typename:float
float_mean	ExpMath.c	/^float float_mean(float *input, unsigned int N)$/;"	f	typeref:typename:float
float_median	ExpMath.c	/^float float_median(float *input, unsigned int N)$/;"	f	typeref:typename:float
float_min	ExpMath.c	/^float float_min(float x, float y)$/;"	f	typeref:typename:float
float_robust_mean	ExpMath.c	/^float float_robust_mean(float *input,unsigned int N)$/;"	f	typeref:typename:float
float_robust_std	ExpMath.c	/^float float_robust_std(float *input, unsigned int N)$/;"	f	typeref:typename:float
float_round	ExpMath.c	/^float float_round(float x, float y)$/;"	f	typeref:typename:float
float_std	ExpMath.c	/^float float_std(float *input,  unsigned int N, float fmean)$/;"	f	typeref:typename:float
float_vector_max	ExpMath.c	/^float float_vector_max(float *input, unsigned int N)$/;"	f	typeref:typename:float
float_vector_min	ExpMath.c	/^float float_vector_min(float *input, unsigned int N)$/;"	f	typeref:typename:float
floatint_round	ExpMath.c	/^int floatint_round(float x, float y)$/;"	f	typeref:typename:int
format	String.c	/^void format(void)$/;"	f	typeref:typename:void
func	C++_new_delete.cpp	/^void func(unsinged long length)$/;"	f	typeref:typename:void
g	C_HeapLeak_size1.c	/^int g;$/;"	v	typeref:typename:int
g	C_HeapLeak_size2.c	/^int g = 99;$/;"	v	typeref:typename:int
g	C_HeapLeak_size3.c	/^int g;$/;"	v	typeref:typename:int
getMemory	C++_new_delete.cpp	/^char *getMemory(unsigned long size)$/;"	f	typeref:typename:char *
globalA	C_FunReturnPoint.c	/^int globalA = 347;$/;"	v	typeref:typename:int
globalA	C_StaticGlo.c	/^int globalA = 347;  \/* 外部链接 ，静态存储期，文件作用域*\/$/;"	v	typeref:typename:int
globalp	VLAmal.c	/^int *globalp;$/;"	v	typeref:typename:int *
heap_test1	C_HeapStack.c	/^void heap_test1(void) {$/;"	f	typeref:typename:void
heap_test2	C_HeapStack.c	/^void heap_test2(void) {$/;"	f	typeref:typename:void
heap_test3	C_HeapStack.c	/^void heap_test3(void) {$/;"	f	typeref:typename:void
heap_test4	C_HeapStack.c	/^void heap_test4(void) {$/;"	f	typeref:typename:void
high	ArrayPoint.h	/^#define high /;"	d
ignoreFailures	.vscode/launch.json	/^          "ignoreFailures": true$/;"	b	object:configurations.0.setupCommands.0
imag	Variable.h	/^	float	imag; \/\/虚部$/;"	m	struct:_COMPLEX	typeref:typename:float
imag	Variable.h	/^	int		imag; \/\/虚部$/;"	m	struct:_COMPLEX_INT32	typeref:typename:int
imag	Variable.h	/^	short	imag; \/\/虚部$/;"	m	struct:_COMPLEX_INT16	typeref:typename:short
includePath	.vscode/c_cpp_properties.json	/^      "includePath": [$/;"	a	object:configurations.0
initializer_list	.vscode/settings.json	/^    "initializer_list": "c",$/;"	s	object:files.associations
intelliSenseMode	.vscode/c_cpp_properties.json	/^      "intelliSenseMode": "linux-gcc-x64",$/;"	s	object:configurations.0
inverse_matrix	test.c	/^float inverse_matrix(float matrix[20][20],int order,int r,int c)$/;"	f	typeref:typename:float
item1	VLAmal.c	/^int item1[LEN] = {0}; \/\/ 使用宏定义#define代替只读类型const，#define和const的不/;"	v	typeref:typename:int[]
last	StructMallocFree.h	/^    char last[SLEN];$/;"	m	struct:names	typeref:typename:char[]
len	VLAmal.c	/^const int len = 10;$/;"	v	typeref:typename:const int
loc_stat.h	.vscode/settings.json	/^    "loc_stat.h": "c",$/;"	s	object:files.associations
m_age	StructMallocFree.h	/^    int m_age ;$/;"	m	struct:_DATASTRUCT	typeref:typename:int
m_cBuffer	C++_new_delete.cpp	/^      char *m_cBuffer;$/;"	m	class:A	typeref:typename:char *	file:
m_nLen	C++_new_delete.cpp	/^      int m_nLen;$/;"	m	class:A	typeref:typename:int	file:
m_sala	StructMallocFree.h	/^    double m_sala;$/;"	m	struct:_DATASTRUCT	typeref:typename:double
m_score	StructMallocFree.h	/^    float m_score;$/;"	m	struct:_DATASTRUCT	typeref:typename:float
main	C++_new_delete.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_ArrayPoint.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_FunReturnPoint.c	/^int main(void)$/;"	f	typeref:typename:int
main	C_HeapLeak_size.c	/^int main()$/;"	f	typeref:typename:int
main	C_HeapLeak_size1.c	/^int main()$/;"	f	typeref:typename:int
main	C_HeapLeak_size2.c	/^int main()$/;"	f	typeref:typename:int
main	C_HeapLeak_size3.c	/^int main()$/;"	f	typeref:typename:int
main	C_HeapStack.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	C_MemoryError.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_MemoryHeapStack.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_MemoryLeak.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_PrintMatrix.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_StaticGlobal.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	C_memcpy.c	/^int main ()$/;"	f	typeref:typename:int
main	Test/C_StaticGlobal.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	test.c	/^int main()$/;"	f	typeref:typename:int
main1	C++_new_delete.cpp	/^void main1()$/;"	f	typeref:typename:void
main2	C++_new_delete.cpp	/^void main2()$/;"	f	typeref:typename:void
main3	C++_new_delete.cpp	/^void main3()$/;"	f	typeref:typename:void
maindice	Diceroll.c	/^void maindice(void)$/;"	f	typeref:typename:void
menu	test.c	/^void menu(void)$/;"	f	typeref:typename:void
miDebuggerPath	.vscode/launch.json	/^      "miDebuggerPath": "gdb",$/;"	s	object:configurations.0
mult_array	Utility.c	/^void mult_array(double ar[], int n, double mult)$/;"	f	typeref:typename:void
name	.vscode/c_cpp_properties.json	/^      "name": "linux-gcc-x64",$/;"	s	object:configurations.0
name	.vscode/launch.json	/^      "name": "C\/C++ Runner: Debug Session",$/;"	s	object:configurations.0
names	StructMallocFree.h	/^typedef struct names$/;"	s
next	S_and_r.c	/^static unsigned long int next = 1;  \/* the seed  *\/$/;"	v	typeref:typename:unsigned long int	file:
p1	C_MemoryHeapStack.c	/^char *p1; \/\/   全局未初始化区$/;"	v	typeref:typename:char *
p_and_s	String.c	/^void p_and_s(void)$/;"	f	typeref:typename:void
pa	C++_new_delete.cpp	/^A* pa = new A();  \/\/类 A 的构造函数被调用$/;"	v	typeref:class:A A *
partab.h	.vscode/settings.json	/^    "partab.h": "c",$/;"	s	object:files.associations
pcg	Where.c	/^const char * pcg = "String Literal";$/;"	v	typeref:typename:const char *
pnt_add	ArrayPoint.c	/^int pnt_add(void)$/;"	f	typeref:typename:int
print_2D_matrix	C_ArrayPoint.c	/^void print_2D_matrix(int m, int n, int **A)$/;"	f	typeref:typename:void
print_2D_matrix1	C_ArrayPoint.c	/^void print_2D_matrix1(int m, int n, int (*A)[n])$/;"	f	typeref:typename:void
print_2D_matrix2	C_ArrayPoint.c	/^void print_2D_matrix2(int m, int n, int A[][n])$/;"	f	typeref:typename:void
program	.vscode/launch.json	/^      "program": "\/home\/jack\/公共的\/Linux_C\/HeapStack_Memory\/build\/Debug\/outDebug",$/;"	s	object:configurations.0
ptr_ops	ArrayPoint.c	/^int ptr_ops(void)$/;"	f	typeref:typename:int
radio_freq_translate	ExpMath.c	/^ int radio_freq_translate(float RadioFreq, unsigned int QuanBit, float SampFreq)$/;"	f	typeref:typename:int
rand1	S_and_r.c	/^int rand1(void)$/;"	f	typeref:typename:int
random	.vscode/settings.json	/^    "random": "c",$/;"	s	object:files.associations
real	Variable.h	/^	float	real; \/\/实部$/;"	m	struct:_COMPLEX	typeref:typename:float
real	Variable.h	/^	int		real; \/\/实部$/;"	m	struct:_COMPLEX_INT32	typeref:typename:int
real	Variable.h	/^	short	real; \/\/实部$/;"	m	struct:_COMPLEX_INT16	typeref:typename:short
real_matrix_adder	ExpMath.c	/^ RMATRIX real_matrix_adder(RMATRIX xdata, RMATRIX ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_constant_adder	ExpMath.c	/^RMATRIX real_matrix_constant_adder(RMATRIX xdata, float ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_constant_diff	ExpMath.c	/^RMATRIX real_matrix_constant_diff(RMATRIX xdata, float ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_constant_divider	ExpMath.c	/^RMATRIX real_matrix_constant_divider(RMATRIX xdata, float ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_constant_multiper	ExpMath.c	/^RMATRIX real_matrix_constant_multiper(RMATRIX xdata, float ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_diff	ExpMath.c	/^ RMATRIX real_matrix_diff(RMATRIX xdata, RMATRIX ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_multiper	ExpMath.c	/^ RMATRIX real_matrix_multiper(RMATRIX xdata, RMATRIX ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_point_divider	ExpMath.c	/^ RMATRIX real_matrix_point_divider(RMATRIX xdata, RMATRIX ydata)$/;"	f	typeref:typename:RMATRIX
real_matrix_point_multiper	ExpMath.c	/^ RMATRIX real_matrix_point_multiper(RMATRIX xdata, RMATRIX ydata)$/;"	f	typeref:typename:RMATRIX
regex	.vscode/settings.json	/^    "regex": "c",$/;"	s	object:files.associations
report_count	PartAB.c	/^void report_count()$/;"	f	typeref:typename:void
request	.vscode/launch.json	/^      "request": "launch",$/;"	s	object:configurations.0
returnA	C_FunReturnPoint.c	/^int returnA(void)$/;"	f	typeref:typename:int
returnStr	ArrayPoint.c	/^char *returnStr(void)$/;"	f	typeref:typename:char *
returnStr	C_FunReturnPoint.c	/^char *returnStr()$/;"	f	typeref:typename:char *
returnStr1	ArrayPoint.c	/^char *returnStr1(void)$/;"	f	typeref:typename:char *
returnStr2	ArrayPoint.c	/^char *returnStr2(void)$/;"	f	typeref:typename:char *
returnStrStatic	C_FunReturnPoint.c	/^char *returnStrStatic()$/;"	f	typeref:typename:char *
roll_count	Diceroll.c	/^int roll_count = 0; \/* 外部链接 *\/$/;"	v	typeref:typename:int
roll_n_dice	Diceroll.c	/^int roll_n_dice(int dice, int sides)$/;"	f	typeref:typename:int
rollem	Diceroll.c	/^static int rollem(int sides) \/\/ 该文件属于该私有文件*\/$/;"	f	typeref:typename:int	file:
row	ArrayPoint.h	/^#define row /;"	d
rows	VLAmal.c	/^static int rows = 2;$/;"	v	typeref:typename:int	file:
s_and_r.h	.vscode/settings.json	/^    "s_and_r.h": "c",$/;"	s	object:files.associations
s_gets	String.c	/^char *s_gets(char *st, int n)$/;"	f	typeref:typename:char *
safeFree	ArrayPoint.h	/^#define safeFree(/;"	d
saferFree	ArrayPoint.c	/^void saferFree(void **pp)$/;"	f	typeref:typename:void
setupCommands	.vscode/launch.json	/^      "setupCommands": [$/;"	a	object:configurations.0
showInt2DArray	C_PrintMatrix.c	/^void showInt2DArray(int m, int n, int (*A)[n]) {$/;"	f	typeref:typename:void
showInt2DArray_point	C_PrintMatrix.c	/^void showInt2DArray_point(int m, int n, int **A) {$/;"	f	typeref:typename:void
showStruct	StructMallocFree.c	/^void showStruct(const DATASTR *p)$/;"	f	typeref:typename:void
show_adjugate_matrix	test.c	/^void show_adjugate_matrix(float matrix[20][20],int order)$/;"	f	typeref:typename:void
show_inverse_matrix	test.c	/^void show_inverse_matrix(float matrix[20][20],int order)$/;"	f	typeref:typename:void
show_transposed_matrix	test.c	/^void show_transposed_matrix(float matrix[20][20],int r,int c)$/;"	f	typeref:typename:void
srand1	S_and_r.c	/^void srand1(unsigned int seed)$/;"	f	typeref:typename:void
stack_test1	C_HeapStack.c	/^void stack_test1(int a, int b, int c) {$/;"	f	typeref:typename:void
stack_test2	C_HeapStack.c	/^void stack_test2(int a, int b, int c) { stack_test1(a, b, c); }$/;"	f	typeref:typename:void
static_store	Where.c	/^int static_store = 30;$/;"	v	typeref:typename:int
stopAtEntry	.vscode/launch.json	/^      "stopAtEntry": false,$/;"	b	object:configurations.0
strA	C_MemoryError.c	/^char *strA()$/;"	f	typeref:typename:char *
string_view	.vscode/settings.json	/^    "string_view": "c",$/;"	s	object:files.associations
strptr	String.c	/^void strptr(void)$/;"	f	typeref:typename:void
sum	C_ArrayPoint.c	/^int sum(int ar[], int n) \/\/ how big an array?$/;"	f	typeref:typename:int
sum1	C_ArrayPoint.c	/^int sum1(const int ar[], int n)$/;"	f	typeref:typename:int
sum2d	ArrayPoint.c	/^int sum2d(int ar[][COLS], int rows)$/;"	f	typeref:typename:int
sum2dvar	ArrayPoint.c	/^int sum2dvar(int rows, int cols, int ar[rows][cols])$/;"	f	typeref:typename:int
sum_cols	ArrayPoint.c	/^void sum_cols(int ar[][COLS], int rows)$/;"	f	typeref:typename:void
sum_rows	ArrayPoint.c	/^void sum_rows(int ar[][COLS], int rows)$/;"	f	typeref:typename:void
sump	C_ArrayPoint.c	/^int sump(int *start, int *end)$/;"	f	typeref:typename:int
test1	C_MemoryError.c	/^void test1(void)$/;"	f	typeref:typename:void
test1	C_address.c	/^void test1() {$/;"	f	typeref:typename:void
test2	C_MemoryError.c	/^void test2(void)$/;"	f	typeref:typename:void
test2	C_address.c	/^void test2() {$/;"	f	typeref:typename:void
test3	C_address.c	/^void test3() {$/;"	f	typeref:typename:void
testSafeFree	ArrayPoint.c	/^int testSafeFree(void)$/;"	f	typeref:typename:int
text	.vscode/launch.json	/^          "text": "-enable-pretty-printing",$/;"	s	object:configurations.0.setupCommands.0
total	PartAB.c	/^static int total = 0;   \/\/静态存储期，内部链接，文件作用域，$/;"	v	typeref:typename:int	file:
transposed_matrix	test.c	/^float transposed_matrix(float matrix[20][20],int r,int c,int i,int j)$/;"	f	typeref:typename:float
trystat	loc_stat.c	/^void trystat(void)$/;"	f	typeref:typename:void
type	.vscode/launch.json	/^      "type": "cppdbg",$/;"	s	object:configurations.0
utility	.vscode/settings.json	/^    "utility": "c",$/;"	s	object:files.associations
utility.h	.vscode/settings.json	/^    "utility.h": "c",$/;"	s	object:files.associations
valarray	.vscode/settings.json	/^    "valarray": "c",$/;"	s	object:files.associations
vararr2d	ArrayPoint.c	/^int vararr2d(void)$/;"	f	typeref:typename:int
variable.h	.vscode/settings.json	/^    "variable.h": "c",$/;"	s	object:files.associations
vector_max	ExpMath.c	/^unsigned int vector_max(double *input, unsigned int N)$/;"	f	typeref:typename:unsigned int
vector_min	ExpMath.c	/^unsigned int vector_min(float *input, unsigned int N)$/;"	f	typeref:typename:unsigned int
version	.vscode/c_cpp_properties.json	/^  "version": 4$/;"	n
version	.vscode/launch.json	/^  "version": "0.2.0",$/;"	s
vlamal.h	.vscode/settings.json	/^    "vlamal.h": "c",$/;"	s	object:files.associations
where.h	.vscode/settings.json	/^    "where.h": "c",$/;"	s	object:files.associations
zip1darray	ArrayPoint.c	/^void zip1darray(void)$/;"	f	typeref:typename:void
zippo1	ArrayPoint.c	/^void zippo1(void)$/;"	f	typeref:typename:void
zippo2	ArrayPoint.c	/^void zippo2(void)$/;"	f	typeref:typename:void
~A	C++_new_delete.cpp	/^      ~A() { delete [] m_cBuffer; }$/;"	f	class:A	file:
~A	C++_new_delete.cpp	/^     ~A()$/;"	f	class:A	file:
▍堆和栈的理论知识	堆栈的区别.md	/^## ▍堆和栈的理论知识$/;"	s	chapter:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
一、内存	堆栈的区别.md	/^## 一、内存$/;"	s	chapter:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
三、 new 和 delete	堆栈的区别.md	/^## 三、 new 和 delete$/;"	s	chapter:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
下次适配算法	堆栈的区别.md	/^##### 下次适配算法$/;"	T	subsection:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理""链表法
二、malloc 和 free	堆栈的区别.md	/^## 二、malloc 和 free$/;"	s	chapter:[看完这篇你还能不懂C语言/C++内存管理？](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247495988&idx=1&sn=2c6af247d80989d0e23c358407d73397&chksm=f96b83c0ce1c0ad6531675a30396cc70ddbb6a377604890b82d92e98698706f9288095a8c87f&mpshare=1&scene=24&srcid=0716tozNVx1RXWxtCOPZTRCE&sharer_sharetime=1626407698049&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
代码段	堆栈的区别.md	/^## 代码段$/;"	s	chapter:[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
位图法	堆栈的区别.md	/^### 位图法$/;"	S	section:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理
内存泄漏：	堆栈的区别.md	/^## 内存泄漏：$/;"	s	chapter:[C语言：什么是野指针和内存泄漏？如何避免野指针](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484911&idx=1&sn=367cfee69fa10d5f14fd01011fe5c4a3&chksm=e8d35647dfa4df516ce2ac4981b9c568fbfd9e95afdcaf13105e4e628394255fd6012f46bd78&scene=0&xtrack=1#rd)
内存的交换技术	堆栈的区别.md	/^## 内存的交换技术$/;"	s	chapter:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
内存碎片	堆栈的区别.md	/^### 内存碎片$/;"	S	section:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""内存的交换技术
函数与内存	堆栈的区别.md	/^# 函数与内存$/;"	c
前言	堆栈的区别.md	/^## 前言 $/;"	s	chapter:[数组与指针有哪些区别？](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247485580&idx=1&sn=c18c0dee9ad0e47d009afa702843d3d0&chksm=fe0d664bc97aef5db4e0a7ee4d51576e158cb01fe7fe5d475c44b19bb41909ef9c44501c033e&mpshare=1&scene=24&srcid=0616HyiS0B4WmMyyVD8TCJk3&sharer_sharetime=1623852503691&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
动态增长	堆栈的区别.md	/^### 动态增长$/;"	S	section:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""内存的交换技术
区别一	堆栈的区别.md	/^## 区别一$/;"	s	chapter:[数组与指针有哪些区别？](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247485580&idx=1&sn=c18c0dee9ad0e47d009afa702843d3d0&chksm=fe0d664bc97aef5db4e0a7ee4d51576e158cb01fe7fe5d475c44b19bb41909ef9c44501c033e&mpshare=1&scene=24&srcid=0616HyiS0B4WmMyyVD8TCJk3&sharer_sharetime=1623852503691&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
区别三	堆栈的区别.md	/^## 区别三$/;"	s	chapter:[数组与指针有哪些区别？](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247485580&idx=1&sn=c18c0dee9ad0e47d009afa702843d3d0&chksm=fe0d664bc97aef5db4e0a7ee4d51576e158cb01fe7fe5d475c44b19bb41909ef9c44501c033e&mpshare=1&scene=24&srcid=0616HyiS0B4WmMyyVD8TCJk3&sharer_sharetime=1623852503691&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
区别二	堆栈的区别.md	/^## 区别二$/;"	s	chapter:[数组与指针有哪些区别？](https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&mid=2247485580&idx=1&sn=c18c0dee9ad0e47d009afa702843d3d0&chksm=fe0d664bc97aef5db4e0a7ee4d51576e158cb01fe7fe5d475c44b19bb41909ef9c44501c033e&mpshare=1&scene=24&srcid=0616HyiS0B4WmMyyVD8TCJk3&sharer_sharetime=1623852503691&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
堆和栈中的存储内容	堆栈的区别.md	/^### 堆和栈中的存储内容$/;"	S	section:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""堆和栈的理论知识
堆和栈中的存储内容	堆栈的区别.md	/^### 堆和栈中的存储内容$/;"	S	section:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""▍堆和栈的理论知识
堆和栈的理论知识	堆栈的区别.md	/^## 堆和栈的理论知识$/;"	s	chapter:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
堆空间	堆栈的区别.md	/^## 堆空间$/;"	s	chapter:[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
多级页表	堆栈的区别.md	/^## 多级页表$/;"	s	chapter:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
如何避免野指针：	堆栈的区别.md	/^## 如何避免野指针：$/;"	s	chapter:[C语言：什么是野指针和内存泄漏？如何避免野指针](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484911&idx=1&sn=367cfee69fa10d5f14fd01011fe5c4a3&chksm=e8d35647dfa4df516ce2ac4981b9c568fbfd9e95afdcaf13105e4e628394255fd6012f46bd78&scene=0&xtrack=1#rd)
小结：	堆栈的区别.md	/^## 小结：$/;"	s	chapter:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
快速适配算法	堆栈的区别.md	/^##### 快速适配算法$/;"	T	subsection:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理""链表法
数据段	堆栈的区别.md	/^## 数据段$/;"	s	chapter:[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
最佳适配算法	堆栈的区别.md	/^##### 最佳适配算法$/;"	T	subsection:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理""链表法
最差适配算法	堆栈的区别.md	/^##### 最差适配算法$/;"	T	subsection:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理""链表法
栈内存	堆栈的区别.md	/^## 栈内存$/;"	s	chapter:[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
申请后系统的响应	堆栈的区别.md	/^### 申请后系统的响应$/;"	S	section:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""堆和栈的理论知识
申请后系统的响应	堆栈的区别.md	/^### 申请后系统的响应$/;"	S	section:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""▍堆和栈的理论知识
申请大小的限制	堆栈的区别.md	/^### 申请大小的限制$/;"	S	section:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""堆和栈的理论知识
申请大小的限制	堆栈的区别.md	/^### 申请大小的限制$/;"	S	section:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""▍堆和栈的理论知识
申请效率的比较	堆栈的区别.md	/^### 申请效率的比较$/;"	S	section:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""▍堆和栈的理论知识
申请效率的比较：	堆栈的区别.md	/^### 申请效率的比较：$/;"	S	section:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""堆和栈的理论知识
申请方式	堆栈的区别.md	/^### 申请方式$/;"	S	section:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""堆和栈的理论知识
申请方式	堆栈的区别.md	/^### 申请方式$/;"	S	section:[堆和栈的区别（非常详细，干货收藏！）](https://mp.weixin.qq.com/s?__biz=MzU5NzA3MDQxMA==&mid=2247493631&idx=2&sn=e779c341ac0c6a15771f4bc32f5eb262&chksm=fe5ba0dac92c29cc2caf600926b834f554c096b1554fc24a8719ad2b6cc16167ced31632c9fe&mpshare=1&scene=24&srcid=0614wLvhXGhhZF4jIFyv7N1U&sharer_sharetime=1623604097197&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""▍堆和栈的理论知识
相关知识点	堆栈的区别.md	/^## 相关知识点$/;"	s	chapter:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)
空闲的内存如何管理	堆栈的区别.md	/^## 空闲的内存如何管理$/;"	s	chapter:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
而四大分区的说法，则这么认为：	堆栈的区别.md	/^## 而四大分区的说法，则这么认为：$/;"	s	chapter:[C语言面试题详解指针篇，不知道内存分几个区，不是合格的程序员](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484988&idx=1&sn=f366c998dd8c3b5cbe7febdadbcf74bc&chksm=e8d35594dfa4dc82302f9abc19de73f3d6f047053c700c378269ffa7ab42857dda3348be95ca&scene=0&xtrack=1#rd)
虚拟内存布局：	堆栈的区别.md	/^## 虚拟内存布局：$/;"	s	chapter:[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
虚拟内存：小内存运行大程序	堆栈的区别.md	/^## 虚拟内存：小内存运行大程序$/;"	s	chapter:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
被欺骗的C进程	堆栈的区别.md	/^## 被欺骗的C进程$/;"	s	chapter:[把内存管理理解好，C语言真的不难学。今天带你“攻破”内存管理](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499159&idx=1&sn=81a4622db90967592927379feaa0bb6f&chksm=f96b8f63ce1c06757bf50fecc6470b859a81339a678b80ad268471708b571357a53cd2412d17&mpshare=1&scene=24&srcid=1110VFHECRxm8sBWx0XoZAVQ&sharer_sharetime=1636516394722&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
野指针：	堆栈的区别.md	/^## 野指针：$/;"	s	chapter:[C语言：什么是野指针和内存泄漏？如何避免野指针](https://mp.weixin.qq.com/s?__biz=MzIzNjgxNjA3MQ==&mid=2247484911&idx=1&sn=367cfee69fa10d5f14fd01011fe5c4a3&chksm=e8d35647dfa4df516ce2ac4981b9c568fbfd9e95afdcaf13105e4e628394255fd6012f46bd78&scene=0&xtrack=1#rd)
链表法	堆栈的区别.md	/^### 链表法$/;"	S	section:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理
页表	堆栈的区别.md	/^### 页表$/;"	S	section:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""虚拟内存：小内存运行大程序
预备知识—程序的内存分配	堆栈的区别.md	/^## 预备知识—程序的内存分配$/;"	s	chapter:[堆和栈的区别（转过无数次的文章）](https://mp.weixin.qq.com/s?__biz=MzA5NTM3MjIxMw==&mid=2247484507&idx=1&sn=f87570b981050ae6bc1e59967fdbddcd&chksm=90411281a7369b973f2d7e347d24aaed6d9dbba7ed380dde7e55de7cbb0cb088f2617c9bd792&mpshare=1&scene=24&srcid=0616KxAx6lyJqQ0M5NLxEaXD&sharer_sharetime=1623843956738&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)
首次适应算法	堆栈的区别.md	/^##### 首次适应算法$/;"	T	subsection:[内存管理：程序是如何被优雅的装载到内存中](https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&mid=2247499719&idx=2&sn=6d3405bec456cbcb9e4ffe813ac24020&chksm=f96b8d33ce1c0425e0cf586aa08739266ef9ecf3f9f0063683ae48bffaed4d468ff3fac6a5e7&mpshare=1&scene=24&srcid=1119qxcAShTVkya1qsYy0P8D&sharer_sharetime=1637316262457&sharer_shareid=0d5c82ce3c8b7c8f30cc9a686416d4a8#rd)""空闲的内存如何管理""链表法
